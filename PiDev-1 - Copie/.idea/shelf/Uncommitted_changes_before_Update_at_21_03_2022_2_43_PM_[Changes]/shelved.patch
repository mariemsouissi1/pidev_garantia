Index: src/main/java/tn/esprit/infini2/entities/Customer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tn.esprit.infini2.entities;\r\n\r\nimport java.io.Serializable;\r\nimport java.util.Date;\r\nimport javax.persistence.Column;\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.GeneratedValue;\r\nimport javax.persistence.GenerationType;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.OneToOne;\r\nimport javax.persistence.Table;\r\nimport javax.persistence.Temporal;\r\nimport javax.persistence.TemporalType;\r\n\r\n@Entity\r\n@Table(name=\"customer\")\r\npublic class Customer implements Serializable{\r\n\t/**\r\n\t * \r\n\t */\r\n\tprivate static final long serialVersionUID = 1L;\r\n\t@Id\r\n\t@GeneratedValue(strategy = GenerationType.IDENTITY)\r\n\t@Column(name=\"idCustomer\")\r\n\tprivate Long idCustomer; //clé primaire\r\n\tprivate String firstName;\r\n\tprivate String lastName;\r\n\t@Temporal(TemporalType.DATE)\r\n\tprivate Date birthDate;\r\n\tprivate int phoneNumber;\r\n\tprivate int cin;\r\n\tprivate String job;\r\n\t@Column(name=\"email\",unique = true)\r\n\tprivate String email;\r\n\tprivate String password;\r\n\t@OneToOne\r\n\tprivate customerAccount customerAccount;\r\n\tpublic Long getIdCustomer() {\r\n\t\treturn idCustomer;\r\n\t}\r\n\tpublic void setIdCustomer(Long idCustomer) {\r\n\t\tthis.idCustomer = idCustomer;\r\n\t}\r\n\tpublic String getFirstName() {\r\n\t\treturn firstName;\r\n\t}\r\n\tpublic void setFirstName(String firstName) {\r\n\t\tthis.firstName = firstName;\r\n\t}\r\n\tpublic String getLastName() {\r\n\t\treturn lastName;\r\n\t}\r\n\tpublic void setLastName(String lastName) {\r\n\t\tthis.lastName = lastName;\r\n\t}\r\n\tpublic Date getBirthDate() {\r\n\t\treturn birthDate;\r\n\t}\r\n\tpublic void setBirthDate(Date birthDate) {\r\n\t\tthis.birthDate = birthDate;\r\n\t}\r\n\tpublic int getPhoneNumber() {\r\n\t\treturn phoneNumber;\r\n\t}\r\n\tpublic void setPhoneNumber(int phoneNumber) {\r\n\t\tthis.phoneNumber = phoneNumber;\r\n\t}\r\n\tpublic int getCin() {\r\n\t\treturn cin;\r\n\t}\r\n\tpublic void setCin(int cin) {\r\n\t\tthis.cin = cin;\r\n\t}\r\n\tpublic String getJob() {\r\n\t\treturn job;\r\n\t}\r\n\tpublic void setJob(String job) {\r\n\t\tthis.job = job;\r\n\t}\r\n\tpublic String getEmail() {\r\n\t\treturn email;\r\n\t}\r\n\tpublic void setEmail(String email) {\r\n\t\tthis.email = email;\r\n\t}\r\n\tpublic String getPassword() {\r\n\t\treturn password;\r\n\t}\r\n\tpublic void setPassword(String password) {\r\n\t\tthis.password = password;\r\n\t}\r\n\tpublic customerAccount getCustomerAccount() {\r\n\t\treturn customerAccount;\r\n\t}\r\n\tpublic void setCustomerAccount(customerAccount customerAccount) {\r\n\t\tthis.customerAccount = customerAccount;\r\n\t}\r\n\r\n\t\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/tn/esprit/infini2/entities/Customer.java b/src/main/java/tn/esprit/infini2/entities/Customer.java
--- a/src/main/java/tn/esprit/infini2/entities/Customer.java	(revision b7ef565343c14444d50853dbc34a7de219de08f7)
+++ b/src/main/java/tn/esprit/infini2/entities/Customer.java	(date 1647866147393)
@@ -15,86 +15,134 @@
 @Entity
 @Table(name="customer")
 public class Customer implements Serializable{
-	/**
-	 * 
-	 */
 	private static final long serialVersionUID = 1L;
 	@Id
 	@GeneratedValue(strategy = GenerationType.IDENTITY)
 	@Column(name="idCustomer")
 	private Long idCustomer; //clé primaire
+
+	@Column(name = "first_name", nullable = false, length = 20)
 	private String firstName;
+
+	@Column(name = "last_name", nullable = false, length = 20)
 	private String lastName;
+
 	@Temporal(TemporalType.DATE)
 	private Date birthDate;
+
 	private int phoneNumber;
+
 	private int cin;
+
+	private float monthlyIncome;
+
 	private String job;
-	@Column(name="email",unique = true)
+
+	private Boolean active=false;
+
+	@Column(name="email",nullable = false,unique = true, length = 45)
 	private String email;
+
+	@Column(nullable = false, length = 64)
 	private String password;
+
+	public float getMonthlyIncome() {
+		return monthlyIncome;
+	}
+
+	public void setMonthlyIncome(float monthlyIncome) {
+		this.monthlyIncome = monthlyIncome;
+	}
+
 	@OneToOne
 	private customerAccount customerAccount;
+
 	public Long getIdCustomer() {
 		return idCustomer;
 	}
+
 	public void setIdCustomer(Long idCustomer) {
 		this.idCustomer = idCustomer;
 	}
+
 	public String getFirstName() {
 		return firstName;
 	}
+
 	public void setFirstName(String firstName) {
 		this.firstName = firstName;
 	}
+
 	public String getLastName() {
 		return lastName;
 	}
+
 	public void setLastName(String lastName) {
 		this.lastName = lastName;
 	}
+
 	public Date getBirthDate() {
 		return birthDate;
 	}
+
 	public void setBirthDate(Date birthDate) {
 		this.birthDate = birthDate;
 	}
+
 	public int getPhoneNumber() {
 		return phoneNumber;
 	}
+
 	public void setPhoneNumber(int phoneNumber) {
 		this.phoneNumber = phoneNumber;
 	}
+
 	public int getCin() {
 		return cin;
 	}
+
 	public void setCin(int cin) {
 		this.cin = cin;
 	}
+
 	public String getJob() {
 		return job;
 	}
+
 	public void setJob(String job) {
 		this.job = job;
 	}
+
 	public String getEmail() {
 		return email;
 	}
+
 	public void setEmail(String email) {
 		this.email = email;
 	}
+
 	public String getPassword() {
 		return password;
 	}
+
 	public void setPassword(String password) {
 		this.password = password;
 	}
+
 	public customerAccount getCustomerAccount() {
 		return customerAccount;
 	}
+
 	public void setCustomerAccount(customerAccount customerAccount) {
 		this.customerAccount = customerAccount;
 	}
 
-	
+
+	public Boolean getActive() {
+		return active;
+	}
+
+	public void setActive(Boolean active) {
+		this.active = active;
+	}
 }
Index: src/main/java/tn/esprit/infini2/entities/Employee.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tn.esprit.infini2.entities;\r\n\r\nimport java.io.Serializable;\r\nimport java.util.Date;\r\nimport java.util.Set;\r\n\r\nimport javax.persistence.CascadeType;\r\nimport javax.persistence.Column;\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.EnumType;\r\nimport javax.persistence.Enumerated;\r\nimport javax.persistence.GeneratedValue;\r\nimport javax.persistence.GenerationType;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.OneToMany;\r\nimport javax.persistence.Table;\r\nimport javax.persistence.Temporal;\r\nimport javax.persistence.TemporalType;\r\n\r\n@Entity\r\n@Table(name=\"employee\")\r\npublic class Employee implements Serializable{\r\n\t/**\r\n\t * \r\n\t */\r\n\tprivate static final long serialVersionUID = 1L;\r\n\t@Id\r\n\t@GeneratedValue(strategy = GenerationType.IDENTITY)\r\n\t@Column(name=\"idEmployee\")\r\n\tprivate Long idEmployee; //clé primaire\r\n\tprivate String firstName;\r\n\tprivate String lastName;\r\n\t@Temporal(TemporalType.DATE)\r\n\tprivate Date birthDate;\r\n\tprivate int phoneNumber;\r\n\tprivate int cin;\r\n\tprivate String job;\r\n\t@Column(name=\"email\",unique = true)\r\n\tprivate String email;\r\n\tprivate String password;\r\n\r\n\t@Enumerated(EnumType.STRING)\r\n\tprivate employeeCategory employeeCategorys;\r\n\r\n\t@OneToMany(cascade = CascadeType.ALL)\r\n\tprivate Set<customerAccount> customerAccounts;\r\n\r\n\tpublic Long getIdEmployee()\r\n\t{\r\n\t\treturn idEmployee;\r\n\t}\r\n\r\n\tpublic void setIdEmployee(Long idEmployee)\r\n\t{\r\n\t\tthis.idEmployee = idEmployee;\r\n\t}\r\n\r\n\tpublic String getFirstName()\r\n\t{\r\n\t\treturn firstName;\r\n\t}\r\n\r\n\tpublic void setFirstName(String firstName)\r\n\t{\r\n\t\tthis.firstName = firstName;\r\n\t}\r\n\r\n\tpublic String getLastName()\r\n\t{\r\n\t\treturn lastName;\r\n\t}\r\n\r\n\tpublic void setLastName(String lastName)\r\n\t{\r\n\t\tthis.lastName = lastName;\r\n\t}\r\n\r\n\tpublic Date getBirthDate()\r\n\t{\r\n\t\treturn birthDate;\r\n\t}\r\n\r\n\tpublic void setBirthDate(Date birthDate)\r\n\t{\r\n\t\tthis.birthDate = birthDate;\r\n\t}\r\n\r\n\tpublic int getPhoneNumber()\r\n\t{\r\n\t\treturn phoneNumber;\r\n\t}\r\n\r\n\tpublic void setPhoneNumber(int phoneNumber)\r\n\t{\r\n\t\tthis.phoneNumber = phoneNumber;\r\n\t}\r\n\r\n\tpublic int getCin()\r\n\t{\r\n\t\treturn cin;\r\n\t}\r\n\r\n\tpublic void setCin(int cin)\r\n\t{\r\n\t\tthis.cin = cin;\r\n\t}\r\n\r\n\tpublic String getJob()\r\n\t{\r\n\t\treturn job;\r\n\t}\r\n\r\n\tpublic void setJob(String job)\r\n\t{\r\n\t\tthis.job = job;\r\n\t}\r\n\r\n\tpublic String getEmail()\r\n\t{\r\n\t\treturn email;\r\n\t}\r\n\r\n\tpublic void setEmail(String email)\r\n\t{\r\n\t\tthis.email = email;\r\n\t}\r\n\r\n\tpublic String getPassword()\r\n\t{\r\n\t\treturn password;\r\n\t}\r\n\r\n\tpublic void setPassword(String password)\r\n\t{\r\n\t\tthis.password = password;\r\n\t}\r\n\r\n\tpublic employeeCategory getEmployeeCategorys()\r\n\t{\r\n\t\treturn employeeCategorys;\r\n\t}\r\n\r\n\tpublic void setEmployeeCategorys(employeeCategory employeeCategorys) {\r\n\t\tthis.employeeCategorys = employeeCategorys;\r\n\t}\r\n\r\n\tpublic Set<customerAccount> getCustomerAccounts() {\r\n\t\treturn customerAccounts;\r\n\t}\r\n\r\n\tpublic void setCustomerAccounts(Set<customerAccount> customerAccounts) {\r\n\t\tthis.customerAccounts = customerAccounts;\r\n\t}\r\n\r\n\t\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/tn/esprit/infini2/entities/Employee.java b/src/main/java/tn/esprit/infini2/entities/Employee.java
--- a/src/main/java/tn/esprit/infini2/entities/Employee.java	(revision b7ef565343c14444d50853dbc34a7de219de08f7)
+++ b/src/main/java/tn/esprit/infini2/entities/Employee.java	(date 1647865069690)
@@ -28,15 +28,25 @@
 	@GeneratedValue(strategy = GenerationType.IDENTITY)
 	@Column(name="idEmployee")
 	private Long idEmployee; //clé primaire
+
+	@Column(name = "first_name", nullable = false, length = 20)
 	private String firstName;
+
+	@Column(name = "last_name", nullable = false, length = 20)
 	private String lastName;
+
 	@Temporal(TemporalType.DATE)
 	private Date birthDate;
+
 	private int phoneNumber;
+
 	private int cin;
-	private String job;
-	@Column(name="email",unique = true)
+
+
+	@Column(nullable = false, name="email", unique = true, length = 45)
 	private String email;
+
+	@Column(nullable = true	, length = 64)
 	private String password;
 
 	@Enumerated(EnumType.STRING)
@@ -105,16 +115,6 @@
 		this.cin = cin;
 	}
 
-	public String getJob()
-	{
-		return job;
-	}
-
-	public void setJob(String job)
-	{
-		this.job = job;
-	}
-
 	public String getEmail()
 	{
 		return email;
Index: src/main/java/tn/esprit/infini2/controllers/SecurityController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tn.esprit.infini2.controllers;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.authentication.BadCredentialsException;\r\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport tn.esprit.infini2.entities.AuthenticationRequest;\r\nimport tn.esprit.infini2.security.JwtUtil;\r\nimport tn.esprit.infini2.services.MyUserDetailsService;\r\nimport tn.esprit.infini2.services.UserService;\r\n\r\n@RestController\r\npublic class SecurityController {\r\n\r\n\t@Autowired\r\n\tprivate MyUserDetailsService userDetailsService;\r\n\t@Autowired\r\n\tprivate JwtUtil jwtTokenUtil;\r\n\t@Autowired\r\n\tprivate UserService userService;\r\n\r\n\t@PreAuthorize(\"hasAuthority(@userService.Employee())\")\r\n\t@GetMapping(\"/hello\")\r\n\tpublic String hello() {\r\n\t\treturn \"Hello Employee world!!!\";\r\n\t}\r\n\t@PreAuthorize(\"hasAuthority(@userService.Customer())\")\r\n\t@GetMapping(\"/hello2\")\r\n\tpublic String hello2() {\r\n\t\treturn \"Hello customer  world!!!\";\r\n\t}\r\n\t\r\n\t@RequestMapping(value = \"/authenticate\", method = RequestMethod.POST)\r\n\tpublic ResponseEntity<String> createAuthenticationToken(@RequestBody AuthenticationRequest authenticationRequest) throws Exception {\r\n\r\n\r\n\tif(userService.verifAuthentifaction(authenticationRequest)) {\r\n\r\n\t\tfinal UserDetails userDetails = userDetailsService\r\n\t\t\t\t.loadUserByUsername(authenticationRequest.getUsername());\r\n\r\n\t\tfinal String jwt = jwtTokenUtil.generateToken(userDetails);\r\n\r\n\t\treturn ResponseEntity.ok(jwt);\r\n\t}\r\n\t\tthrow new Exception(\"Incorrect username or password\");\r\n\t}\r\n\t\r\n\r\n\t\r\n\t}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/tn/esprit/infini2/controllers/SecurityController.java b/src/main/java/tn/esprit/infini2/controllers/SecurityController.java
--- a/src/main/java/tn/esprit/infini2/controllers/SecurityController.java	(revision b7ef565343c14444d50853dbc34a7de219de08f7)
+++ b/src/main/java/tn/esprit/infini2/controllers/SecurityController.java	(date 1647860727628)
@@ -52,6 +52,5 @@
 	}
 	
 
-	
 	}
 
Index: src/main/java/tn/esprit/infini2/security/SecurityConfigurer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tn.esprit.infini2.security;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.security.crypto.password.NoOpPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\nimport tn.esprit.infini2.services.MyUserDetailsService;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\n@EnableGlobalMethodSecurity(prePostEnabled = true)\r\npublic class SecurityConfigurer extends WebSecurityConfigurerAdapter{\r\n\r\n\t@Autowired\r\n\tprivate MyUserDetailsService myUserDetailsService;\r\n\r\n\t@Autowired\r\n\tprivate JwtRequestFilter jwtRequestFilter;\r\n\t\r\n\t@Override\r\n\tprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\r\n\t\tauth.userDetailsService(myUserDetailsService);\r\n\t}\r\n\t\r\n\t@Bean\r\n\tpublic PasswordEncoder passwordEncoder() {\r\n\t\treturn NoOpPasswordEncoder.getInstance();\r\n\t\t\r\n\t}\r\n\r\n\t@Override\r\n\t@Bean\r\n\tpublic AuthenticationManager authenticationManagerBean() throws Exception {\r\n\t\treturn super.authenticationManagerBean();\r\n\t}\r\n\t\r\n\t@Override\r\n\tprotected void configure(HttpSecurity http) throws Exception {\r\n\t    http.csrf().disable();\r\n        http.headers().frameOptions().disable();\r\n        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\r\n       \r\n        http.authorizeRequests().antMatchers(\"/authenticate\").permitAll();\r\n        http.authorizeRequests().anyRequest().authenticated();\r\n       // http.addFilter(new JWTAuthenticationFilter(authenticationManager(), getApplicationContext()));\r\n        http.addFilterBefore(new JwtRequestFilter(), UsernamePasswordAuthenticationFilter.class);\r\n\r\n\t}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/tn/esprit/infini2/security/SecurityConfigurer.java b/src/main/java/tn/esprit/infini2/security/SecurityConfigurer.java
--- a/src/main/java/tn/esprit/infini2/security/SecurityConfigurer.java	(revision b7ef565343c14444d50853dbc34a7de219de08f7)
+++ b/src/main/java/tn/esprit/infini2/security/SecurityConfigurer.java	(date 1647870057331)
@@ -51,6 +51,7 @@
         http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
        
         http.authorizeRequests().antMatchers("/authenticate").permitAll();
+        http.authorizeRequests().antMatchers("/registerCustomer").permitAll();
         http.authorizeRequests().anyRequest().authenticated();
        // http.addFilter(new JWTAuthenticationFilter(authenticationManager(), getApplicationContext()));
         http.addFilterBefore(new JwtRequestFilter(), UsernamePasswordAuthenticationFilter.class);
Index: src/main/java/tn/esprit/infini2/services/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tn.esprit.infini2.services;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.stereotype.Service;\r\nimport tn.esprit.infini2.entities.AuthenticationRequest;\r\nimport tn.esprit.infini2.entities.Customer;\r\nimport tn.esprit.infini2.entities.Employee;\r\nimport tn.esprit.infini2.repositories.CustomerRepository;\r\nimport tn.esprit.infini2.repositories.EmployeeRepository;\r\n\r\nimport java.util.Optional;\r\n\r\n@Service\r\npublic class UserService {\r\n\r\n    @Autowired\r\n    private EmployeeRepository  employeeRepository;\r\n    private CustomerRepository customerRepository;\r\n\r\n    private PasswordEncoder passwordEncoder;\r\n\r\n    public BCryptPasswordEncoder PasswordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n    public Boolean verifAuthentifaction(AuthenticationRequest authenticationRequest) {\r\n        Optional<Employee> employee = employeeRepository.findEmployeeByEmail(authenticationRequest.getUsername());\r\n        Optional<Customer> customer = customerRepository.findCustomerByEmail(authenticationRequest.getUsername());\r\n        if (employee.isPresent()){\r\n            this.passwordEncoder = this.PasswordEncoder();\r\n            Boolean verif = employee.get().getPassword() != null && !employee.get().getPassword().isEmpty()\r\n                    && this.passwordEncoder.matches(employee.get().getPassword(), authenticationRequest.getPassword());\r\n            return verif;\r\n        }\r\n        else{\r\nif(customer.isPresent()){\r\n    this.passwordEncoder = this.PasswordEncoder();\r\n    Boolean verif = customer.get().getPassword() != null && !customer.get().getPassword().isEmpty()\r\n            && this.passwordEncoder.matches(customer.get().getPassword(), authenticationRequest.getPassword());\r\n    return verif;\r\n} else return  false;\r\n        }\r\n//        if (authenticationRequest.getUsername().equals(\"foo\") && authenticationRequest.getPassword().equals(\"foo\"))\r\n//            return true;\r\n//        if (authenticationRequest.getUsername().equals(\"foo2\") && authenticationRequest.getPassword().equals(\"foo2\"))\r\n//            return true;\r\n//        return false;\r\n    }\r\n\r\n    public String getAuthentifaction(String usename) {\r\n        if (usename.equals(\"foo\") )\r\n            return Employee();\r\n        if (usename.equals(\"foo2\") )\r\n            return Customer();\r\n        return \"\";\r\n    }\r\n\r\n\r\n    public String Employee(){\r\n        return Employee.class.getSimpleName();\r\n    }\r\n    public String Customer(){\r\n        return Customer.class.getSimpleName();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/tn/esprit/infini2/services/UserService.java b/src/main/java/tn/esprit/infini2/services/UserService.java
--- a/src/main/java/tn/esprit/infini2/services/UserService.java	(revision b7ef565343c14444d50853dbc34a7de219de08f7)
+++ b/src/main/java/tn/esprit/infini2/services/UserService.java	(date 1647692542818)
@@ -17,6 +17,7 @@
 
     @Autowired
     private EmployeeRepository  employeeRepository;
+    @Autowired
     private CustomerRepository customerRepository;
 
     private PasswordEncoder passwordEncoder;
@@ -34,12 +35,15 @@
             return verif;
         }
         else{
-if(customer.isPresent()){
-    this.passwordEncoder = this.PasswordEncoder();
-    Boolean verif = customer.get().getPassword() != null && !customer.get().getPassword().isEmpty()
-            && this.passwordEncoder.matches(customer.get().getPassword(), authenticationRequest.getPassword());
-    return verif;
-} else return  false;
+            if(customer.isPresent())
+            {
+                this.passwordEncoder = this.PasswordEncoder();
+                Boolean verif = customer.get().getPassword() != null && !customer.get().getPassword().isEmpty()
+                && this.passwordEncoder.matches(customer.get().getPassword(), authenticationRequest.getPassword());
+                return verif;
+            }
+            else
+                return  false;
         }
 //        if (authenticationRequest.getUsername().equals("foo") && authenticationRequest.getPassword().equals("foo"))
 //            return true;
@@ -48,10 +52,10 @@
 //        return false;
     }
 
-    public String getAuthentifaction(String usename) {
-        if (usename.equals("foo") )
+    public String getAuthentifaction(String username) {
+        if (username.equals("foo") )
             return Employee();
-        if (usename.equals("foo2") )
+        if (username.equals("foo2") )
             return Customer();
         return "";
     }
Index: src/main/resources/templates/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/templates/index.html b/src/main/resources/templates/index.html
new file mode 100644
--- /dev/null	(date 1647686218437)
+++ b/src/main/resources/templates/index.html	(date 1647686218437)
@@ -0,0 +1,19 @@
+<!DOCTYPE html>
+<html xmlns:th="http://www.thymeleaf.org">
+<head>
+  <meta charset="ISO-8859-1">
+  <title>Welcome to CodeJava Home</title>
+  <link rel="stylesheet" type="text/css" href="/webjars/bootstrap/css/bootstrap.min.css" />
+  <script type="text/javascript" src="/webjars/jquery/jquery.min.js"></script>
+  <script type="text/javascript" src="/webjars/bootstrap/js/bootstrap.min.js"></script>
+</head>
+<body>
+<div class="container text-center">
+  <h1>Welcome to CodeJava.net</h1>
+  <h3><a th:href="/@{/users}">List of Users</a></h3>
+  <h3><a th:href="/@{/register}">Register</a></h3>
+  <h3><a th:href="/@{/login}">Login</a></h3>
+</div>
+
+</body>
+</html>
\ No newline at end of file
Index: src/main/java/tn/esprit/infini2/controllers/AppController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/tn/esprit/infini2/controllers/AppController.java b/src/main/java/tn/esprit/infini2/controllers/AppController.java
new file mode 100644
--- /dev/null	(date 1647864074787)
+++ b/src/main/java/tn/esprit/infini2/controllers/AppController.java	(date 1647864074787)
@@ -0,0 +1,64 @@
+package tn.esprit.infini2.controllers;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+import org.springframework.stereotype.Controller;
+import org.springframework.ui.Model;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PostMapping;
+import tn.esprit.infini2.entities.Customer;
+import tn.esprit.infini2.entities.Employee;
+import tn.esprit.infini2.repositories.CustomerRepository;
+import tn.esprit.infini2.repositories.EmployeeRepository;
+
+@Controller
+public class AppController {
+
+    @Autowired
+    private EmployeeRepository employeRepo;
+
+    @Autowired
+    private CustomerRepository customerRepo;
+
+    @GetMapping("")
+    public String viewHomePage() {
+        return "index";
+    }
+
+
+    @GetMapping("/registerEmployee")
+    public String showEmployeeRegistrationForm(Model model) {
+        model.addAttribute("employee", new Employee());
+
+        return "signup_form_employee";
+    }
+
+    @GetMapping("/registerCustomer")
+    public String showCustomerRegistrationForm(Model model) {
+        model.addAttribute("customer", new Customer());
+
+        return "signup_form_customer";
+    }
+
+    @PostMapping("/process_register_employee")
+    public String processRegisterEmployee(Employee employee) {
+        BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
+        String encodedPassword = passwordEncoder.encode(employee.getPassword());
+        employee.setPassword(encodedPassword);
+
+        employeRepo.save(employee);
+
+        return "register_success_employee";
+    }
+
+    @PostMapping("/process_register_customer")
+    public String processRegisterCustomer(Customer customer) {
+        BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
+        String encodedPassword = passwordEncoder.encode(customer.getPassword());
+        customer.setPassword(encodedPassword);
+
+        customerRepo.save(customer);
+
+        return "register_success_customer";
+    }
+}
Index: src/main/java/tn/esprit/infini2/repositories/EmployeeRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tn.esprit.infini2.repositories;\r\n\r\nimport org.springframework.data.repository.CrudRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport tn.esprit.infini2.entities.Employee;\r\n\r\nimport java.util.Optional;\r\n\r\n@Repository\r\npublic interface EmployeeRepository extends CrudRepository<Employee, Long> {\r\n    Optional<Employee> findEmployeeByEmail(String email);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/tn/esprit/infini2/repositories/EmployeeRepository.java b/src/main/java/tn/esprit/infini2/repositories/EmployeeRepository.java
--- a/src/main/java/tn/esprit/infini2/repositories/EmployeeRepository.java	(revision b7ef565343c14444d50853dbc34a7de219de08f7)
+++ b/src/main/java/tn/esprit/infini2/repositories/EmployeeRepository.java	(date 1647681382683)
@@ -1,5 +1,6 @@
 package tn.esprit.infini2.repositories;
 
+import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.repository.CrudRepository;
 import org.springframework.stereotype.Repository;
 
@@ -8,6 +9,6 @@
 import java.util.Optional;
 
 @Repository
-public interface EmployeeRepository extends CrudRepository<Employee, Long> {
+public interface EmployeeRepository extends JpaRepository<Employee, Long> {
     Optional<Employee> findEmployeeByEmail(String email);
 }
Index: src/main/java/tn/esprit/infini2/repositories/CustomerRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tn.esprit.infini2.repositories;\r\n\r\nimport org.springframework.data.repository.CrudRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport tn.esprit.infini2.entities.Customer;\r\n\r\nimport java.util.Optional;\r\n\r\n@Repository\r\npublic interface CustomerRepository extends CrudRepository<Customer, Long>{\r\n\r\n    Optional<Customer> findCustomerByEmail(String email);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/tn/esprit/infini2/repositories/CustomerRepository.java b/src/main/java/tn/esprit/infini2/repositories/CustomerRepository.java
--- a/src/main/java/tn/esprit/infini2/repositories/CustomerRepository.java	(revision b7ef565343c14444d50853dbc34a7de219de08f7)
+++ b/src/main/java/tn/esprit/infini2/repositories/CustomerRepository.java	(date 1647681489274)
@@ -1,5 +1,6 @@
 package tn.esprit.infini2.repositories;
 
+import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.repository.CrudRepository;
 import org.springframework.stereotype.Repository;
 
@@ -8,7 +9,6 @@
 import java.util.Optional;
 
 @Repository
-public interface CustomerRepository extends CrudRepository<Customer, Long>{
-
+public interface CustomerRepository extends JpaRepository<Customer, Long>{
     Optional<Customer> findCustomerByEmail(String email);
 }
Index: src/main/resources/templates/signup_form_customer.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/templates/signup_form_customer.html b/src/main/resources/templates/signup_form_customer.html
new file mode 100644
--- /dev/null	(date 1647865080207)
+++ b/src/main/resources/templates/signup_form_customer.html	(date 1647865080207)
@@ -0,0 +1,95 @@
+<!DOCTYPE html>
+<html xmlns:th="http://www.thymeleaf.org">
+<head>
+  <meta charset="ISO-8859-1">
+  <title>Sign Up - CodeJava</title>
+  <link rel="stylesheet" type="text/css" href="/webjars/bootstrap/css/bootstrap.min.css" />
+  <script type="text/javascript" src="/webjars/jquery/jquery.min.js"></script>
+  <script type="text/javascript" src="/webjars/bootstrap/js/bootstrap.min.js"></script>
+</head>
+<body>
+<div class="container text-center">
+  <div>
+    <h1>Customer Registration - Sign Up</h1>
+  </div>
+  <form th:action="@{/process_register}" th:object="${customer}"
+        method="post" style="max-width: 600px; margin: 0 auto;">
+    <div class="m-3">
+      <div class="form-group row">
+        <label class="col-4 col-form-label">E-mail: </label>
+        <div class="col-8">
+          <input type="email" th:field="*{email}" class="form-control" required />
+        </div>
+      </div>
+
+      <div class="form-group row">
+        <label class="col-4 col-form-label">Password: </label>
+        <div class="col-8">
+          <input type="password" th:field="*{password}" class="form-control"
+                 required minlength="6" maxlength="10"/>
+        </div>
+      </div>
+
+      <div class="form-group row">
+        <label class="col-4 col-form-label">First Name: </label>
+        <div class="col-8">
+          <input type="text" th:field="*{firstName}" class="form-control"
+                 required minlength="2" maxlength="20"/>
+        </div>
+      </div>
+
+      <div class="form-group row">
+        <label class="col-4 col-form-label">Last Name: </label>
+        <div class="col-8">
+          <input type="text" th:field="*{lastName}" class="form-control"
+                 required minlength="2" maxlength="20" />
+        </div>
+      </div>
+
+      <div class="form-group row">
+        <label class="col-4 col-form-label">Birth date: </label>
+        <div class="col-8">
+          <input type="date" th:field="*{birthDate}" class="form-control" required/>
+        </div>
+      </div>
+
+      <div class="form-group row">
+        <label class="col-4 col-form-label">Phone number: </label>
+        <div class="col-8">
+          <input type="text" th:field="*{phoneNumber}" class="form-control"
+                 required minlength="8" maxlength="13"/>
+        </div>
+      </div>
+
+      <div class="form-group row">
+        <label class="col-4 col-form-label">CIN: </label>
+        <div class="col-8">
+          <input type="number" th:field="*{cin}" class="form-control"
+                 required minlength="8" maxlength="20"/>
+        </div>
+      </div>
+
+      <div class="form-group row">
+        <label class="col-4 col-form-label">Current job: </label>
+        <div class="col-8">
+          <input type="text" th:field="*{job}" class="form-control"
+                 required minlength="4" maxlength="30"/>
+        </div>
+      </div>
+
+      <div class="form-group row">
+        <label class="col-4 col-form-label">Monthly income: </label>
+        <div class="col-8">
+          <input type="number" th:field="*{monthlyIncome}" class="form-control"
+                 required />
+        </div>
+      </div>
+
+      <div>
+        <button type="submit" class="btn btn-primary">Sign Up</button>
+      </div>
+    </div>
+  </form>
+</div>
+</body>
+</html>
\ No newline at end of file
Index: src/main/resources/templates/signup_form_employee.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/templates/signup_form_employee.html b/src/main/resources/templates/signup_form_employee.html
new file mode 100644
--- /dev/null	(date 1647865069681)
+++ b/src/main/resources/templates/signup_form_employee.html	(date 1647865069681)
@@ -0,0 +1,80 @@
+<!DOCTYPE html>
+<html xmlns:th="http://www.thymeleaf.org">
+<head>
+  <meta charset="ISO-8859-1">
+  <title>Sign Up - CodeJava</title>
+  <link rel="stylesheet" type="text/css" href="/webjars/bootstrap/css/bootstrap.min.css" />
+  <script type="text/javascript" src="/webjars/jquery/jquery.min.js"></script>
+  <script type="text/javascript" src="/webjars/bootstrap/js/bootstrap.min.js"></script>
+</head>
+<body>
+<div class="container text-center">
+  <div>
+    <h1>Employee Registration</h1>
+  </div>
+  <form th:action="@{/process_register}" th:object="${employee}"
+        method="post" style="max-width: 600px; margin: 0 auto;">
+    <div class="m-3">
+      <div class="form-group row">
+        <label class="col-4 col-form-label">E-mail: </label>
+        <div class="col-8">
+          <input type="email" th:field="*{email}" class="form-control" required />
+        </div>
+      </div>
+
+      <div class="form-group row">
+        <label class="col-4 col-form-label">Password: </label>
+        <div class="col-8">
+          <input type="password" th:field="*{password}" class="form-control"
+                 required minlength="6" maxlength="10"/>
+        </div>
+      </div>
+
+      <div class="form-group row">
+        <label class="col-4 col-form-label">First Name: </label>
+        <div class="col-8">
+          <input type="text" th:field="*{firstName}" class="form-control"
+                 required minlength="2" maxlength="20"/>
+        </div>
+      </div>
+
+      <div class="form-group row">
+        <label class="col-4 col-form-label">Last Name: </label>
+        <div class="col-8">
+          <input type="text" th:field="*{lastName}" class="form-control"
+                 required minlength="2" maxlength="20" />
+        </div>
+      </div>
+
+      <div class="form-group row">
+        <label class="col-4 col-form-label">Birth date: </label>
+        <div class="col-8">
+          <input type="date" th:field="*{birthDate}" class="form-control" required/>
+        </div>
+      </div>
+
+      <div class="form-group row">
+        <label class="col-4 col-form-label">Phone number: </label>
+        <div class="col-8">
+          <input type="text" th:field="*{phoneNumber}" class="form-control"
+                 required minlength="8" maxlength="13"/>
+        </div>
+      </div>
+
+      <div class="form-group row">
+        <label class="col-4 col-form-label">CIN: </label>
+        <div class="col-8">
+          <input type="number" th:field="*{cin}" class="form-control"
+                 required minlength="8" maxlength="20"/>
+        </div>
+      </div>
+
+
+      <div>
+        <button type="submit" class="btn btn-primary">Add employee</button>
+      </div>
+    </div>
+  </form>
+</div>
+</body>
+</html>
\ No newline at end of file
Index: src/main/resources/templates/successRegistration.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/templates/successRegistration.html b/src/main/resources/templates/successRegistration.html
new file mode 100644
--- /dev/null	(date 1647690386519)
+++ b/src/main/resources/templates/successRegistration.html	(date 1647690386519)
@@ -0,0 +1,15 @@
+<!DOCTYPE html>
+<html xmlns:th="http://www.thymeleaf.org">
+<head>
+  <meta charset="ISO-8859-1">
+  <title>Registration Success</title>
+  <link rel="stylesheet" type="text/css" href="/webjars/bootstrap/css/bootstrap.min.css" />
+</head>
+<body>
+<div class="container text-center">
+  <h3>You have signed up successfully!</h3>
+  <h4><a th:href="/@{/login}">Click here to Login</a></h4>
+</div>
+
+</body>
+</html>
\ No newline at end of file
Index: src/test/java/tn/esprit/infini2/EmployeeRepositoryTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/tn/esprit/infini2/EmployeeRepositoryTest.java b/src/test/java/tn/esprit/infini2/EmployeeRepositoryTest.java
new file mode 100644
--- /dev/null	(date 1647702176775)
+++ b/src/test/java/tn/esprit/infini2/EmployeeRepositoryTest.java	(date 1647702176775)
@@ -0,0 +1,41 @@
+package tn.esprit.infini2;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+import org.junit.jupiter.api.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
+import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase.Replace;
+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
+import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
+import org.springframework.test.annotation.Rollback;
+import tn.esprit.infini2.entities.Employee;
+import tn.esprit.infini2.repositories.EmployeeRepository;
+
+
+@DataJpaTest
+@AutoConfigureTestDatabase(replace = Replace.NONE)
+@Rollback(false)
+public class EmployeeRepositoryTest {
+    @Autowired
+    private TestEntityManager entityManager;
+
+    @Autowired
+    public EmployeeRepository repo;
+
+    @Test
+    public void testCreateUser() {
+        Employee employee = new Employee();
+        employee.setEmail("ravikumar@gmail.com");
+        employee.setPassword("ravi2020");
+        employee.setFirstName("Ravi");
+        employee.setLastName("Kumar");
+
+        Employee savedUser = repo.save(employee);
+
+        Employee existUser = entityManager.find(Employee.class, savedUser.getIdEmployee());
+
+        assertThat(employee.getEmail()).isEqualTo(existUser.getEmail());
+
+    }
+}
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\t<parent>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t\t<version>2.6.4</version>\r\n\t\t<relativePath/> <!-- lookup parent from repository -->\r\n\t</parent>\r\n\t<groupId>tn.esprit.4infini2</groupId>\r\n\t<artifactId>PiDev-1</artifactId>\r\n\t<version>1.0</version>\r\n\t<name>PiDev-1</name>\r\n\t<description>tp1SpringBoot</description>\r\n\t<properties>\r\n\t\t<java.version>1.8</java.version>\r\n\t</properties>\r\n\t<dependencies>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-security</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>io.jsonwebtoken</groupId>\r\n\t\t\t<artifactId>jjwt</artifactId>\r\n\t\t\t<version>0.9.1</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>mysql</groupId>\r\n\t\t\t<artifactId>mysql-connector-java</artifactId>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t</dependencies>\r\n\r\n\t<build>\r\n\t\t<plugins>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\r\n\t\t\t</plugin>\r\n\t\t</plugins>\r\n\t</build>\r\n\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision b7ef565343c14444d50853dbc34a7de219de08f7)
+++ b/pom.xml	(date 1647686818044)
@@ -44,6 +44,36 @@
 			<groupId>org.springframework.boot</groupId>
 			<artifactId>spring-boot-starter-test</artifactId>
 			<scope>test</scope>
+			<exclusions>
+				<exclusion>
+					<groupId>org.junit.vintage</groupId>
+					<artifactId>junit-vintage-engine</artifactId>
+				</exclusion>
+			</exclusions>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-devtools</artifactId>
+			<scope>runtime</scope>
+			<optional>true</optional>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-thymeleaf</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>org.webjars</groupId>
+			<artifactId>jquery</artifactId>
+			<version>3.4.1</version>
+		</dependency>
+		<dependency>
+			<groupId>org.webjars</groupId>
+			<artifactId>bootstrap</artifactId>
+			<version>4.3.1</version>
+		</dependency>
+		<dependency>
+			<groupId>org.webjars</groupId>
+			<artifactId>webjars-locator-core</artifactId>
 		</dependency>
 	</dependencies>
 
